temp = randperm(81);
P_train = res(temp(1: 65), 1: 4)';
T_train = res(temp(1: 65), 5)';
M = size(P_train, 2);
P_test = res(temp(66: end), 1: 4)';
T_test = res(temp(66: end), 5)';
N = size(P_test, 2);
[p_train, ps_input] = mapminmax(P_train, 0, 1);
p_test = mapminmax('apply', P_test, ps_input);

[t_train, ps_output] = mapminmax(T_train, 0, 1);
t_test = mapminmax('apply', T_test, ps_output);
inputnum  = size(p_train, 1);
hiddennum = 9;
outputnum = size(t_train,1);
net = newff(p_train, t_train, hiddennum);
net.trainParam.epochs     = 1000;
net.trainParam.goal       = 1e-4;
net.trainParam.lr         = 0.01;
net.trainParam.showWindow = 0;
for i = 1 : sizepop
    pop(i, :) = rands(1, numsum); 
    V(i, :) = rands(1, numsum); 
    fitness(i) = fun(pop(i, :), hiddennum, net, p_train, t_train);
end
[fitnesszbest, bestindex] = min(fitness);
zbest = pop(bestindex, :); 
gbest = pop; 
fitnessgbest = fitness;
BestFit = fitnesszbest;
for i = 1 : maxgen
    for j = 1 : sizepop
        V(j, :) = V(j, :) + c1 * rand * (gbest(j, :) - pop(j, :)) + c2 * rand * (zbest - pop(j, :));
        V(j, (V(j, :) > Vmax)) = Vmax;
        V(j, (V(j, :) < Vmin)) = Vmin;
        pop(j, :) = pop(j, :) + 0.2 * V(j, :);
        pop(j, (pop(j, :) > popmax)) = popmax;
        pop(j, (pop(j, :) < popmin)) = popmin;
        pos = unidrnd(numsum);
        if rand > 0.85
            pop(j, pos) = rands(1, 1);
        end
        fitness(j) = fun(pop(j, :), hiddennum, net, p_train, t_train);
    end
    for j = 1 : sizepop
        if fitness(j) < fitnessgbest(j)
            gbest(j, :) = pop(j, :);
            fitnessgbest(j) = fitness(j);
        end
        if fitness(j) < fitnesszbest
            zbest = pop(j, :);
            fitnesszbest = fitness(j);
        end
    end
    BestFit = [BestFit, fitnesszbest];    
end
w1 = zbest(1 : inputnum * hiddennum);
B1 = zbest(inputnum * hiddennum + 1 : inputnum * hiddennum + hiddennum);
w2 = zbest(inputnum * hiddennum + hiddennum + 1 : inputnum * hiddennum ...
    + hiddennum + hiddennum * outputnum);
B2 = zbest(inputnum * hiddennum + hiddennum + hiddennum * outputnum + 1 : ...
    inputnum * hiddennum + hiddennum + hiddennum * outputnum + outputnum);
net.Iw{1, 1} = reshape(w1, hiddennum, inputnum);
net.Lw{2, 1} = reshape(w2, outputnum, hiddennum);
net.b{1}     = reshape(B1, hiddennum, 1);
net.b{2}     = B2';
net.trainParam.showWindow = 1;
net = train(net, p_train, t_train);
t_sim1 = sim(net, p_train);
t_sim2 = sim(net, p_test );
T_sim1 = mapminmax('reverse', t_sim1, ps_output);
T_sim2 = mapminmax('reverse', t_sim2, ps_output);
